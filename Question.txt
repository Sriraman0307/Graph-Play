Implementation: 

The implementation of undirected graph is done using adjacency list. Adjacency list is implemented using HashMap with key containing vertex and value containing connecting vertex. For each edge we also maintain a weight list in which it stores weight of each edge. If the input file does not contain weights it by default takes it as 1. 

1. readGraph(String filelocation): Reading in an input graph This function takes the command line argument of the file location which is the input graph. The input file is taken and is read line by line. Each line is stored as in a string and is split by space and each integer is parsed and is added as vertex and added in the adjacency list. Corresponding edge is added to weight list with its weight. 
2. isReachable(int startVertex, int EndVertex): checks if node x is reachable from node y We maintain a Hashmap visited with key as vertices and value as a Boolean representing if the vertices are already been visited. The function looks up the adjacency list of the vertices recursively till it finds the EndVertex successfully. It returns a Boolean value to represent if vertices were reachable or not. Return True if vertices were reachable Return False if vertices were not reachable 

3. findshortpath(int x, int y): find the shortest path between two nodes x and y We maintain a ArrayList of Integer ShortestPath. We recursively find all possible paths in function findAllPaths and calculate the cost of path and compare it with cost of ShortestPath. If the new path generated costs less we replace the ShortestPath with new path otherwise we discard the path generated. This function findAllPaths thus returns a shortest path and is called in findshortpath. 

4. minSpanTree(): computes a minimum spanning tree of connected component of the graph. To draw a minimum spanning tree of graph I have first sorted all the edges by weight. Then I maintain an array of Unsettled vertices which initially has all the vertices. Then I maintain another array which contains fromArray which contains all the settled vertices. The function goes through the sorted edge weight list and takes first edge to be the starting vertex and adds it to fromArray, simultaneously removing it from list of unsettled vertices. It then takes the next edge with least cost and tries to add the vertices in fromArray. If one of the end was already in fromArray it adds the new vertex in fromArray and remove it from Unsettled vertices. If neither of the two vertex are present in fromArray the it finds the shortest path from all the vertices of fromArray to both the vertices of new edge. Then it adds the shortest path and next edge to fromArray and remove it from unsettled vertices.
is continues till there are no more vertices in unsettled array. 

5. printGraph(): Prints the graph